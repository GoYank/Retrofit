package com.example.gyk.chatim.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.gyk.chatim.bean.QuestionBank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_BANK".
*/
public class QuestionBankDao extends AbstractDao<QuestionBank, Long> {

    public static final String TABLENAME = "QUESTION_BANK";

    /**
     * Properties of entity QuestionBank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Num = new Property(1, int.class, "num", false, "NUM");
        public final static Property Topic = new Property(2, String.class, "topic", false, "TOPIC");
        public final static Property OptionA = new Property(3, String.class, "optionA", false, "OPTION_A");
        public final static Property OptionB = new Property(4, String.class, "optionB", false, "OPTION_B");
        public final static Property OptionC = new Property(5, String.class, "optionC", false, "OPTION_C");
        public final static Property OptionD = new Property(6, String.class, "optionD", false, "OPTION_D");
        public final static Property Answer = new Property(7, String.class, "answer", false, "ANSWER");
    }


    public QuestionBankDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionBankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_BANK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUM\" INTEGER NOT NULL UNIQUE ," + // 1: num
                "\"TOPIC\" TEXT," + // 2: topic
                "\"OPTION_A\" TEXT," + // 3: optionA
                "\"OPTION_B\" TEXT," + // 4: optionB
                "\"OPTION_C\" TEXT," + // 5: optionC
                "\"OPTION_D\" TEXT," + // 6: optionD
                "\"ANSWER\" TEXT);"); // 7: answer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_BANK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionBank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNum());
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(3, topic);
        }
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(4, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(5, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(6, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(7, optionD);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(8, answer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionBank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNum());
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(3, topic);
        }
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(4, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(5, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(6, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(7, optionD);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(8, answer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionBank readEntity(Cursor cursor, int offset) {
        QuestionBank entity = new QuestionBank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // topic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // optionA
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // optionB
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // optionC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // optionD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // answer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionBank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNum(cursor.getInt(offset + 1));
        entity.setTopic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptionA(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOptionB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptionC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOptionD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnswer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionBank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionBank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionBank entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
